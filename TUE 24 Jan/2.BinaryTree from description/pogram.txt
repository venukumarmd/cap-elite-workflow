class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        Map<Integer, TreeNode> map = new HashMap<>();
        Set<Integer> childs = new HashSet<>();
        int n = descriptions.length;
        for (int i = 0; i < n; ++i) {
            int parent = descriptions[i][0];
            int child = descriptions[i][1];
            
            TreeNode parentNode = map.get(parent);
            if (parentNode == null) {
                parentNode = new TreeNode(parent);
                map.put(parent, parentNode);
            }
            
            TreeNode childNode = map.get(child);
            if (childNode == null) {
                childNode = new TreeNode(child);
                map.put(child, childNode);
            }
            
            if (descriptions[i][2] == 1) {
                parentNode.left = childNode;
            } else {
                parentNode.right = childNode;
            }
            
            childs.add(child);
        }
        
        TreeNode root = null;
        for (int i = 0; i < n; ++i) {
            int parent = descriptions[i][0];
            if (!childs.contains(parent)) {
                root = map.get(parent);
                break;
            }
        }
        
        return root;
    }
}`