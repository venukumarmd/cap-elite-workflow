



class Solution {
    public int numIslands(char[][] grid) {
        int island = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    island++;
                    bfs(grid, i, j);
                }
            }
        }

        return island;
    }

    private void bfs(char[][] grid, int x, int y) {
        int[][] dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        Queue<int[]> q = new LinkedList();
        q.add(new int[]{x, y});
        grid[x][y] = '0';

        while (q.size() > 0) {
            int[] curr = q.poll();
            for (int[] d : dir) {
                int r = curr[0] + d[0];
                int c = curr[1] + d[1];
                if (r < 0 || c < 0 || r >= grid.length || c >= grid[0].length || grid[r][c] == '0')
                    continue;
                grid[r][c] = '0';
                q.add(new int[]{r, c});
            }
        }
    }
}